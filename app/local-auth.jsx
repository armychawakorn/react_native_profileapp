import React, { useEffect, useState, useCallback } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator, SafeAreaView } from 'react-native';
import * as LocalAuthentication from 'expo-local-authentication';
import { useLocalAuth } from '../contexts/LocalAuthContext';
import { useTheme } from '../contexts/ThemeContext';
import { useRouter } from 'expo-router';
import PinModal from '../components/PinModal';

const LocalAuthScreen = () => {
  const { theme } = useTheme();
  const router = useRouter();
  const { supported, enrolled, refreshDeviceStatus } = useLocalAuth();

  const [status, setStatus] = useState('checking'); // checking | prompt | failed | success | unsupported | pin
  const [message, setMessage] = useState('');
  const [showPin, setShowPin] = useState(false);

  const dynamic = StyleSheet.create({
    container: { flex: 1, backgroundColor: theme.background },
    card: {
      backgroundColor: theme.cardBackground,
      margin: 20,
      marginTop: 40,
      borderRadius: 16,
      padding: 24,
      alignItems: 'center',
      shadowColor: theme.shadowColor,
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 4,
    },
    title: { fontSize: 22, fontWeight: '700', color: theme.text, marginBottom: 8, textAlign: 'center' },
    desc: { fontSize: 14, color: theme.textSecondary, textAlign: 'center' },
    btn: {
      backgroundColor: theme.secondary,
      paddingVertical: 12,
      paddingHorizontal: 18,
      borderRadius: 10,
      marginTop: 18,
    },
    btnText: { color: '#fff', fontWeight: '600' },
    hint: { marginTop: 10, color: theme.textSecondary, fontSize: 12, textAlign: 'center' },
    error: { color: theme.accent, marginTop: 12, textAlign: 'center' },
  });

  const startAuth = useCallback(async () => {
    setMessage('');
    await refreshDeviceStatus();
    if (!supported) {
      setStatus('unsupported');
      return;
    }
    if (!enrolled) {
      setStatus('unsupported');
      return;
    }
    setStatus('prompt');
    const result = await LocalAuthentication.authenticateAsync({
      promptMessage: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô',
      fallbackLabel: '‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
      cancelLabel: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      disableDeviceFallback: false,
    });
    if (result.success) {
      setStatus('success');
      router.replace('/signin');
    } else {
      setStatus('failed');
      setMessage(result.warning || '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  }, [router, enrolled, supported, refreshDeviceStatus]);

  useEffect(() => {
    const init = async () => {
      setStatus('checking');
      await startAuth();
    };
    init();
  }, [startAuth]);

  return (
    <SafeAreaView style={dynamic.container}>
      <View style={dynamic.card}>
        <Text style={dynamic.title}>üîê Local Authentication</Text>
        {status === 'checking' && (
          <>
            <ActivityIndicator size="large" color={theme.secondary} />
            <Text style={dynamic.hint}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå...</Text>
          </>
        )}
        {status === 'prompt' && (
          <>
            <Text style={dynamic.desc}>‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Face ID / Touch ID ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</Text>
            <Text style={dynamic.hint}>‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</Text>
          </>
        )}
        {status === 'failed' && (
          <>
            <Text style={dynamic.error}>‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</Text>
            {!!message && <Text style={dynamic.hint}>{message}</Text>}
            <TouchableOpacity style={dynamic.btn} onPress={startAuth}>
              <Text style={dynamic.btnText}>‡∏•‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</Text>
            </TouchableOpacity>
            <TouchableOpacity style={[dynamic.btn, { marginTop: 10, backgroundColor: theme.primary }]} onPress={() => { setShowPin(true); setStatus('pin'); }}>
              <Text style={dynamic.btnText}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PIN</Text>
            </TouchableOpacity>
          </>
        )}
        {status === 'unsupported' && (
          <>
            <Text style={dynamic.desc}>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ö‡πÇ‡∏≠‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏™‡πå</Text>
            <Text style={dynamic.hint}>‡∏à‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</Text>
            <TouchableOpacity style={dynamic.btn} onPress={() => router.replace('/signin')}>
              <Text style={dynamic.btnText}>‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô</Text>
            </TouchableOpacity>
            <TouchableOpacity style={[dynamic.btn, { marginTop: 10, backgroundColor: theme.primary }]} onPress={() => { setShowPin(true); setStatus('pin'); }}>
              <Text style={dynamic.btnText}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PIN</Text>
            </TouchableOpacity>
          </>
        )}
      </View>
      <PinModal
        visible={showPin}
        onCancel={() => { setShowPin(false); setStatus('failed'); }}
        onSuccess={() => { setShowPin(false); router.replace('/signin'); }}
      />
    </SafeAreaView>
  );
};

export default LocalAuthScreen;
